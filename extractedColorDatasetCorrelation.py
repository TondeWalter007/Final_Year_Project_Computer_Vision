import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn import linear_model
import statsmodels.api as sm

image_list = ['41A2.jpg', '41A3.jpg', '41A4.jpg', '41A5.jpg', '41B1.jpg', '41B2.jpg', '41B3.jpg', '41B4.jpg',
              '41B5.jpg', '42A1.jpg', '42A2.jpg', '42A3.jpg', '42A4.jpg', '42A5.jpg', '42B1.jpg', '42B2.jpg',
              '42B3.jpg', '42B4.jpg', '42B5.jpg', '43A1.jpg', '43A2.jpg', '43A3.jpg', '43A4.jpg', '43A5.jpg',
              '43B1.jpg', '43B3.jpg', '43B4.jpg', '43B5.jpg', '61A1.jpg', '61A2.jpg', '61A3.jpg', '61A4.jpg',
              '61A5.jpg', '61B1.jpg', '61B2.jpg', '61B3.jpg', '61B4.jpg', '61B5.jpg', '62A1.jpg', '62A2.jpg',
              '62A3.jpg', '62A4.jpg', '62A5.jpg', '62B1.jpg', '62B2.jpg', '62B3.jpg', '62B4.jpg', '62B5.jpg',
              '63A1.jpg', '63A3.jpg', '63A4.jpg', '63A5.jpg', '63B1.jpg', '63B2.jpg', '63B3.jpg', '63B4.jpg',
              '63B5.jpg', '81A1.jpg', '81A3.jpg', '81A4.jpg', '81A5.jpg', '81B1.jpg', '81B2.jpg',
              '81B3.jpg', '81B4.jpg', '81B5.jpg', '82A1.jpg', '82A2.jpg', '82A3.jpg', '82A4.jpg', '82A5.jpg',
              '82B1.jpg', '82B2.jpg', '82B3.jpg', '82B4.jpg', '83A1.jpg', '83A2.jpg', '83A3.jpg', '83A4.jpg',
              '83A5.jpg', '83B1.jpg', '83B2.jpg', '83B3.jpg', '83B4.jpg', '83B5.jpg']

l = [43.36, 44.21, 38.92, 52.21, 45.13, 43.4, 40.07, 34.36, 37.9, 43.59, 45.69, 54.34, 57.42, 58.52, 58.76, 51.28,
     58.32, 56.84, 63.04, 50.28, 56.3, 46.4, 66.21, 55.46, 57.08, 57.89, 52.51, 52.76, 48.34, 39.49, 40.77, 38.42,
     44.01, 45.3, 38.25, 53.97, 39.71, 53.64, 56.29, 55.34, 58.4, 61.17, 52.41, 63.07, 60.83, 59.62, 55.67, 58.95, 49.3,
     49.88, 49.25, 51.82, 49.38, 49.14, 52.58, 50.22, 44.99, 40.33, 47.76, 49.7, 52.19, 42.74, 46.05, 39.21, 43.71,
     37.91, 54.07, 48.76, 52.09, 56.72, 59.99, 54.36, 56.8, 53.15, 48.94, 51.25, 50.36, 52.38, 51.75, 44.03, 53.43,
     45.71, 48.75, 52.61, 52.53]

a = [9.69, 10.15, 7.24, 7.01, 9.1, 8.46, 6.89, 9.21, 4.93, 8.33, 8.49, 8.1, 5.98, 7.46, 5.29, 5.39, 6.81, 8.38, 7.11,
     3.99, 4.61, 6.31, 5.83, 4.61, 5.81, 4.63, 3.5, 4.51, 4.38, 3.14, 5.15, 3.84, 4.4, 5.1, 4.45, 8.01, 7.21, 4.89,
     4.32, 7.17, 6.65, 8.54, 6.19, 4.07, 10.29, 6.85, 6.58, 4.22, 1.41, 4.0, 6.29, 5.4, 5.23, 0.8, 5.21, 6.92, 2.18,
     9.52, 6.55, 4.98, 7.1, 7.63, 5.87, 10.04, 9.89, 8.49, 10.37, 12.3, 6.7, 4.38, 7.2, 6.13, 7.65, 4.23, 7.73, 6.39,
     10.65, 3.07, 5.16, 11.03, 3.93, 3.16, 5.67, 5.38, 3.37]

b = [16.29, 12.07, 11.74, 8.1, 10.35, 13.29, 10.91, 13.4, 9.59, 5.03, 5.7, 4.22, 6.4, 5.75, 4.32, 1.96, 3.7, 7.33, 4.97,
     6.38, 5.3, 6.71, 7.38, 4.63, 9.95, 6.48, 4.93, 5.92, 5.32, 5.65, 5.1, 6.58, 10.44, 6.27, 11.32, 6.02, 9.77, 6.05,
     7.6, 5.67, 8.44, 9.1, 7.78, 3.83, 9.21, 9.08, 9.07, 6.31, 6.07, 6.39, 7.89, 7.42, 6.86, 5.24, 8.02, 8.73, 3.93,
     11.96, 10.5, 6.15, 6.13, 11.1, 13.4, 12.22, 11.35, 9.06, 2.68, 9.7, 6.15, 8.82, 5.03, 7.72, 13.05, 8.24, 14.61,
     7.27, 10.21, 3.55, 6.79, 12.44, 6.3, 8.04, 10.14, 7.47, 6.72]

gsi = [9.82, 7.49, 8.63, 10.57, 9.26, 6.29, 14.38, 9.13, 11.17, 13.32, 8.43, 6.44, 16.53, 9.48, 12.56, 7.29, 12.92,
       13.02, 15.46, 12.25, 18.22, 18.96, 12.56, 12.14, 9.07, 11.13, 22.87, 9.04, 9.77, 20.30, 11.47, 10.41, 7.43,
       12.27, 11.86, 13.46, 15.25, 12.23, 14.14, 9.35, 14.83, 8.41, 10.30, 9.23, 14.60, 15.31, 25.94, 12.28, 10.94,
       13.34, 17.61, 16.03, 8.50, 4.83, 15.24, 9.80, 15.02, 15.80, 12.85, 17.14, 11.024, 9.81, 14.62, 16.09, 15.75,
       20.98, 6.08, 10.21, 12.96, 11.51, 12.80, 13.01, 11.99, 15.14, 11.86, 16.62, 4.57, 10.50, 16.38, 6.48, 12.65,
       14.29, 10.15, 13.01, 7.36]

color_corr = {
    'l': [43.36, 44.21, 38.92, 52.21, 45.13, 43.4, 40.07, 34.36, 37.9, 43.59, 45.69, 54.34, 57.42, 58.52, 58.76, 51.28,
          58.32, 56.84, 63.04, 50.28, 56.3, 46.4, 66.21, 55.46, 57.08, 57.89, 52.51, 52.76, 48.34, 39.49, 40.77, 38.42,
          44.01, 45.3, 38.25, 53.97, 39.71, 53.64, 56.29, 55.34, 58.4, 61.17, 52.41, 63.07, 60.83, 59.62, 55.67, 58.95,
          49.3,
          49.88, 49.25, 51.82, 49.38, 49.14, 52.58, 50.22, 44.99, 40.33, 47.76, 49.7, 52.19, 42.74, 46.05, 39.21, 43.71,
          37.91, 54.07, 48.76, 52.09, 56.72, 59.99, 54.36, 56.8, 53.15, 48.94, 51.25, 50.36, 52.38, 51.75, 44.03, 53.43,
          45.71, 48.75, 52.61, 52.53],
    'a': [9.69, 10.15, 7.24, 7.01, 9.1, 8.46, 6.89, 9.21, 4.93, 8.33, 8.49, 8.1, 5.98, 7.46, 5.29, 5.39, 6.81, 8.38,
          7.11,
          3.99, 4.61, 6.31, 5.83, 4.61, 5.81, 4.63, 3.5, 4.51, 4.38, 3.14, 5.15, 3.84, 4.4, 5.1, 4.45, 8.01, 7.21, 4.89,
          4.32, 7.17, 6.65, 8.54, 6.19, 4.07, 10.29, 6.85, 6.58, 4.22, 1.41, 4.0, 6.29, 5.4, 5.23, 0.8, 5.21, 6.92,
          2.18,
          9.52, 6.55, 4.98, 7.1, 7.63, 5.87, 10.04, 9.89, 8.49, 10.37, 12.3, 6.7, 4.38, 7.2, 6.13, 7.65, 4.23, 7.73,
          6.39,
          10.65, 3.07, 5.16, 11.03, 3.93, 3.16, 5.67, 5.38, 3.37],
    'b': [16.29, 12.07, 11.74, 8.1, 10.35, 13.29, 10.91, 13.4, 9.59, 5.03, 5.7, 4.22, 6.4, 5.75, 4.32, 1.96, 3.7, 7.33,
          4.97,
          6.38, 5.3, 6.71, 7.38, 4.63, 9.95, 6.48, 4.93, 5.92, 5.32, 5.65, 5.1, 6.58, 10.44, 6.27, 11.32, 6.02, 9.77,
          6.05,
          7.6, 5.67, 8.44, 9.1, 7.78, 3.83, 9.21, 9.08, 9.07, 6.31, 6.07, 6.39, 7.89, 7.42, 6.86, 5.24, 8.02, 8.73,
          3.93,
          11.96, 10.5, 6.15, 6.13, 11.1, 13.4, 12.22, 11.35, 9.06, 2.68, 9.7, 6.15, 8.82, 5.03, 7.72, 13.05, 8.24,
          14.61,
          7.27, 10.21, 3.55, 6.79, 12.44, 6.3, 8.04, 10.14, 7.47, 6.72],
    'gsi': [9.82, 7.49, 8.63, 10.57, 9.26, 6.29, 14.38, 9.13, 11.17, 13.32, 8.43, 6.44, 16.53, 9.48, 12.56, 7.29, 12.92,
            13.02, 15.46, 12.25, 18.22, 18.96, 12.56, 12.14, 9.07, 11.13, 22.87, 9.04, 9.77, 20.30, 11.47, 10.41, 7.43,
            12.27, 11.86, 13.46, 15.25, 12.23, 14.14, 9.35, 14.83, 8.41, 10.30, 9.23, 14.60, 15.31, 25.94, 12.28, 10.94,
            13.34, 17.61, 16.03, 8.50, 4.83, 15.24, 9.80, 15.02, 15.80, 12.85, 17.14, 11.024, 9.81, 14.62, 16.09, 15.75,
            20.98, 6.08, 10.21, 12.96, 11.51, 12.80, 13.01, 11.99, 15.14, 11.86, 16.62, 4.57, 10.50, 16.38, 6.48, 12.65,
            14.29, 10.15, 13.01, 7.36]
}

print('length of l array:', len(l))
print('length of a array:', len(a))
print('length of b array:', len(b))
print('length of gsi array:', len(gsi))
print('')
print('average of l array:', np.average(l))
print('average of a array:', np.average(a))
print('average of b array:', np.average(b))
print('average of gsi array:', np.average(gsi))

print("")

df = pd.DataFrame(color_corr, columns=['l', 'a', 'b', 'gsi'])
print(df)

plt.scatter(df['b'], df['gsi'], color='red')
plt.title('B Vs GSI', fontsize=14)
plt.xlabel('B', fontsize=14)
plt.ylabel('GSI', fontsize=14)
plt.grid(True)
plt.show()

X = df[['l', 'a', 'b']]
Y = df['gsi']

regr = linear_model.LinearRegression()
regr.fit(X, Y)

print('Intercept: \n', regr.intercept_)
print('Coefficients: \n', regr.coef_)

# with statsmodels
X = sm.add_constant(X)  # adding a constant

model = sm.OLS(Y, X).fit()
predictions = model.predict(X)

print_model = model.summary()
print(print_model)
